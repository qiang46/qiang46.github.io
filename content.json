{"meta":{"title":"qiang's blog","subtitle":null,"description":"坚持是一种风格","author":"qiang","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2018-05-23T06:17:51.000Z","updated":"2018-05-23T06:18:55.146Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-05-23T06:19:12.000Z","updated":"2018-05-23T06:19:26.525Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2018-05-23T08:38:51.000Z","updated":"2018-05-23T08:38:51.754Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"字符串-数组方法","slug":"string","date":"2018-05-22T07:53:49.000Z","updated":"2018-05-23T06:22:10.901Z","comments":true,"path":"2018/05/22/string/","link":"","permalink":"http://yoursite.com/2018/05/22/string/","excerpt":"","text":"一、字符串方法1、length[] 和 charAt()注意字符串的这两个方法只读不可写charCodeAt()String.fromCharCode()indexOf / lastIndexOfsubstring用法 str.substring(start , end) ，从start截取到end，不包括endstart/end最小值为0，即使小于0也为0start &gt; end时，交换位置获取 substring(end , start)slice和substring用法一样start / end可以为负值，负值时，倒着从最后数start 和 end任何时候都不会交换位置，能截取才有值，截取不到则无值toUpperCase() / toLowerCase()split() 二、数组方法length []可读可写push() unshift() pop() shift()他们的返回值splice( index , num , info )index：索引（包括） num：个数 info：替换内容（可以是多个参数，可以没有）arr.splice(0,2); //从第0个开始删除2个arr.splice(0,1,”清心”); //从第0个开始删除1个，并在当前位置添加 “清心”arr.splice(2,0,”清心”); //从第2个开始删除0个，并在当前位置添加”清心”sort()默认字符编码排序，若有数字会以字符的形式排序可以使用匿名函数加return排序倒序使用： arr.reverse()concat()join()filter过滤接收匿名函数加return的形式，该函数接收一个形参，代表序号，需返回一个布尔值判断是不是数组Array.isArray( ) //返回一个布尔值","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"git命令大全","slug":"postName","date":"2018-05-21T09:53:35.000Z","updated":"2018-05-23T06:22:10.900Z","comments":true,"path":"2018/05/21/postName/","link":"","permalink":"http://yoursite.com/2018/05/21/postName/","excerpt":"","text":"一、 Git 命令初识在正式介绍Git命令之前，先介绍一下Git 的基本命令和操作，对Git命令有一个总体的认识 示例：从Git 版本库的初始化，通常有两种方式： 1）git clone：这是一种较为简单的初始化方式，当你已经有一个远程的Git版本库，只需要在本地克隆一份；例如：git clone git://github.com/someone/some_project.git some_project； 上面的命令就是将’git://github.com/someone/some_project.git’这个URL地址的远程版本库，完全克隆到本地s ome_project目录下 2）git init 和 git remote：这种方式稍微复杂一些，当你本地创建了一个工作目录，你可以进入这个目录，使 用’git init’命令进行初始化；Git以后就会对该目录下的文件进行版本控制，这时候如果你需要将它放到远程服 务器上，可以在远程服务器上创建一个目录，并把可访问的URL记录下来，此时你就可以利用’git remote ad d’命令来增加一个远程服务器端。例如：git remote add origin git://github.com/someone/another_project.git 上面的命令就会增加URL地址为’git: //github.com/someone/another_project.git’，名称为origin的远程服务 器，以后提交代码的时候只需要使用 origin别名即可。 二、 Git 常用命令1) 远程仓库相关命令1234567891011121314检出仓库： $ git clone git://github.com/jquery/jquery.git；查看远程仓库：$ git remote -v；添加远程仓库：$ git remote add [name]；删除远程仓库：$ git remote rm [name]；修改远程仓库：$ git remote set-url --push [name] [newUrl]；拉取远程仓库：$ git pull [remoteName] [localBranchName]；推送远程仓库：$ git push [remoteName] [localBranchName]； *如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的 分支，如下： $git push origin test:master； // 提交本地test分支作为远程的master分支 $git push origin test:test ；// 提交本地test分支作为远程的test分支 2）分支(branch)操作相关命令查看本地分支：$ git branch； 查看远程分支：$ git branch -r； 创建本地分支：$ git branch [name]； —-注意新分支创建后不会自动切换为当前分支 切换分支：$ git checkout [name]； 创建新分支并立即切换到新分支：$ git checkout -b [name]； 删除分支：$ git branch -d [name] —- -d选项只能删除已经参与了合并的分支，对于未有合并的支是无法删 除的。如果想强制删除一个分支，可以使用-D选项 合并分支：$ git merge [name]； —-将名称为[name]的分支与当前分支合并 创建远程分支(本地分支push到远程)：$ git push origin [name]； 删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name]； *创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔) $git symbolic-ref HEAD refs/heads/[name]； $rm .git/index； $git clean -fdx； 3）版本(tag)操作相关命令查看版本：$ git tag； 创建版本：$ git tag [name]； 删除版本：$ git tag -d [name]； 查看远程版本：$ git tag -r； 创建远程版本(本地版本push到远程)：$ git push origin [name]； 删除远程版本：$ git push origin :refs/tags/[name]； 合并远程仓库的tag到本地：$ git pull origin –tags； 上传本地tag到远程仓库：$ git push origin –tags； 创建带注释的tag：$ git tag -a [name] -m ‘yourMessage’； 4) 子模块(submodule)相关操作命令添加子模块：$ git submodule add [path]；如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs； 初始化子模块：$ git submodule init —-只在首次检出仓库时运行一次就行 更新子模块：$ git submodule update —-每次更新或切换分支后都需要运行一下 删除子模块：（分4步走哦） 1) $ git rm –cached [path]； 2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉 3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉 4) 手动删除子模块残留的目录 5）忽略一些文件、文件夹不提交 在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如 target； bin； *.db；","categories":[],"tags":[]}]}